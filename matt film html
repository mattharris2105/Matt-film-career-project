<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>6-Week Film Industry Career Action Plan</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Calm Focus (Warm neutrals with subtle, muted accents) -->
    <!-- Application Structure Plan: A single-page dashboard with a sticky top navigation to jump between six distinct weekly sections. This task-oriented, timeline structure is more intuitive for tracking progress than the original linear document. The core interaction is checking off tasks, which dynamically updates weekly and overall progress bars and a summary doughnut chart, providing immediate visual feedback and motivation. -->
    <!-- Visualization & Content Choices: Report Info: Weekly tasks -> Goal: Track progress -> Viz: Interactive task cards with checkboxes -> Interaction: Clicking checkbox updates state, strikes through text, and updates progress visuals -> Justification: Provides clear, immediate feedback on completion. Report Info: Overall progress -> Goal: Summarize completion -> Viz: Doughnut Chart -> Justification: Offers a high-level, easily digestible visual summary of the user's effort -> Library: Chart.js (Canvas). No SVG/Mermaid used. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #FDFBF8;
        }
        .task-card {
            transition: all 0.3s ease-in-out;
        }
        .task-card.completed {
            background-color: #F0F5F2;
            border-left-color: #4CAF50;
        }
        .task-card.completed p {
            text-decoration: line-through;
            color: #6B7280;
        }
        .sticky-nav {
            position: sticky;
            top: 0;
            z-index: 50;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 250px;
            margin-left: auto;
            margin-right: auto;
            height: 250px;
        }
        .modal {
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }
        .modal-content {
            max-height: 80vh;
            overflow-y: auto;
        }
    </style>
</head>
<body class="text-gray-800">

    <!-- Gemini Modal (Hidden by default) -->
    <div id="gemini-modal" class="modal fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 z-50 invisible opacity-0">
        <div class="bg-white rounded-xl shadow-2xl w-full max-w-lg p-6">
            <div class="flex justify-between items-center pb-3 border-b border-gray-200">
                <h3 id="modal-title" class="text-xl font-bold text-gray-900">AI Assistant</h3>
                <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </div>
            <div id="modal-content" class="modal-content py-4">
                <div id="loading-indicator" class="hidden text-center text-indigo-600">
                    <div class="animate-spin inline-block w-8 h-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
                    <p class="mt-2">Generating content...</p>
                </div>
                <div id="generated-output" class="text-gray-700 whitespace-pre-wrap"></div>
                <div id="citation-sources" class="mt-4 border-t pt-2 text-xs text-gray-500 hidden">
                    <p class="font-semibold">Sources:</p>
                    <ul id="sources-list" class="list-disc list-inside mt-1"></ul>
                </div>
            </div>
            <div id="modal-actions" class="pt-3 border-t border-gray-200 hidden">
                <button onclick="copyToClipboard(document.getElementById('generated-output').innerText)" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 rounded-lg transition-colors">
                    Copy to Clipboard
                </button>
            </div>
        </div>
    </div>
    <!-- End Modal -->

    <header class="py-8 px-4 text-center bg-white border-b border-gray-200">
        <h1 class="text-4xl font-bold text-gray-900">6-Week Film Industry Action Plan</h1>
        <p class="mt-2 text-lg text-gray-600">Your interactive roadmap to breaking into the film industry, powered by AI assistance.</p>
    </header>

    <div id="progress-overview" class="container mx-auto px-4 sm:px-6 lg:px-8 py-8 flex flex-col md:flex-row items-center justify-center gap-8 bg-white rounded-xl shadow-sm my-8">
        <div class="chart-container">
            <canvas id="overallProgressChart"></canvas>
        </div>
        <div class="text-center md:text-left">
            <h2 class="text-2xl font-bold text-gray-900">Overall Progress</h2>
            <p class="text-gray-600">Stay focused and track your journey one task at a time.</p>
            <div id="overall-stats" class="mt-4 text-xl font-semibold">
                <span id="completed-tasks-count">0</span> / <span id="total-tasks-count">0</span> Tasks Completed
            </div>
        </div>
    </div>


    <nav class="sticky-nav bg-white/80 backdrop-blur-sm shadow-md">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-center items-center py-3 space-x-2 sm:space-x-4 md:space-x-6">
                <a href="#week-1" class="text-sm sm:text-base font-medium text-gray-600 hover:text-indigo-600 transition-colors px-3 py-2 rounded-md">Week 1</a>
                <a href="#week-2" class="text-sm sm:text-base font-medium text-gray-600 hover:text-indigo-600 transition-colors px-3 py-2 rounded-md">Week 2</a>
                <a href="#week-3" class="text-sm sm:text-base font-medium text-gray-600 hover:text-indigo-600 transition-colors px-3 py-2 rounded-md">Week 3</a>
                <a href="#week-4" class="text-sm sm:text-base font-medium text-gray-600 hover:text-indigo-600 transition-colors px-3 py-2 rounded-md">Week 4</a>
                <a href="#week-5" class="text-sm sm:text-base font-medium text-gray-600 hover:text-indigo-600 transition-colors px-3 py-2 rounded-md">Week 5</a>
                <a href="#week-6" class="text-sm sm:text-base font-medium text-gray-600 hover:text-indigo-600 transition-colors px-3 py-2 rounded-md">Week 6</a>
            </div>
        </div>
    </nav>

    <main id="plan-container" class="container mx-auto p-4 sm:p-6 lg:p-8">
    </main>

    <footer class="text-center py-6 mt-8 border-t border-gray-200">
        <p class="text-gray-500">Designed to help you achieve your career goals.</p>
    </footer>

    <script>
        const planData = [
            {
                week: 1,
                title: "Foundation & Branding (Discovery Mode)",
                description: "This week is about setting a strong foundation. You'll conduct initial research to inform your career direction and start building your personal brand to stand out in the industry.",
                tasks: [
                    { category: 'Foundation', description: 'Conduct Informational Interviews: Schedule at least 3 short calls (15-30 mins) with professionals in Sales, Strategy, and Box Office roles.', completed: false },
                    { category: 'Foundation', description: 'Create a Skills/Interests Matrix: Weigh your personal skills/interests against the requirements of each role to identify the best fit.', completed: false },
                    { category: 'Branding', description: 'CV Reframing: Re-write your CV to explicitly highlight transferable skills, using target job descriptions as a guide.', completed: false },
                    { category: 'Branding', description: 'LinkedIn Optimization: Update your LinkedIn headline and "About" section to reflect your target career path.', completed: false },
                    { category: 'Research', description: 'Set Daily Reading Reminder: Create a recurring daily reminder for 15-20 minutes to read Screen Daily, Variety, The Numbers, and Gower Street Analytics.', completed: false },
                    { category: 'Research', description: 'Source Financial Training: Find free online tutorials or articles explaining basic ROI and marketing performance analysis.', completed: false },
                ]
            },
            {
                week: 2,
                title: "Core Knowledge & System Basics",
                description: "Now that you have a direction, it's time to build your core industry knowledge. Focus on understanding key financial concepts and getting started with essential data analysis systems.",
                tasks: [
                    { category: 'Knowledge', description: 'Define Core Financial Terms: Research and write down clear definitions for P&A budgets, Minimum Guarantees (MGs), screen numbers, and marketing cost vs. return.', completed: false },
                    { category: 'Knowledge', description: 'Research Release Date Strategy: Choose 3 films released recently and research the reported reasoning behind their chosen release dates. Document your findings.', completed: false },
                    { category: 'Training', description: 'Enroll in Sales/Distribution Course: Search platforms like Coursera/edX for a course on film acquisition, distribution strategy, or international film sales. Enroll in at least one.', completed: false },
                    { category: 'Systems', description: 'Select Primary System & Start: Choose one visualization tool (Tableau or Power BI) and enroll in a free introductory course/tutorial. Complete the first module.', completed: false },
                    { category: 'Practical', description: 'Raindance Engagement: Check the Raindance website for upcoming free or low-cost online events/webinars and register for one.', completed: false },
                ]
            },
            {
                week: 3,
                title: "Deep Dive Finance & Negotiation Prep",
                description: "This week, you'll dive deeper into the financial side of the industry. You will apply your learning by building a sample analysis and start preparing for the negotiation aspects of distribution.",
                tasks: [
                    { category: 'Finance', description: 'Build Sample ROI Sheet: Build a basic spreadsheet to calculate the ROI for a hypothetical film\'s marketing campaign.', completed: false },
                    { category: 'Forecasting', description: 'Listen to Podcast & Source Data: Listen to the Curzon Marketing Podcast episode on data/forecasting. Find publicly available data for at least 10 comparable films in a specific genre/market.', completed: false },
                    { category: 'Negotiation', description: 'Identify Key Terminology: Research and define the key negotiating points for distribution with exhibitors (e.g., split terms, holdovers) and VOD (e.g., windowing, revenue share).', completed: false },
                    { category: 'Systems', description: 'Complete SQL Basics: Dedicate time to a free resource (like Codecademy) to learn the TOP 5 SQL commands for basic data querying.', completed: false },
                    { category: 'Systems', description: 'Watch System Demos: Watch introductory or tutorial videos for Distribbler, Salesforce, and Airtasker.', completed: false },
                ]
            },
            {
                week: 4,
                title: "Technical Skills & Automation",
                description: "Focus on practical application of your technical skills. Start building your forecasting model and learn automation techniques that are highly valued in data-driven roles.",
                 tasks: [
                    { category: 'Forecasting', description: 'Start Forecasting Model: Begin building a basic Excel model to predict Box Office/VOD performance for a hypothetical new film using the historical data you sourced last week.', completed: false },
                    { category: 'Automation', description: 'Power Query Intro: Watch a beginner\'s tutorial (30-60 mins) on how to use Power Query in Excel to import and clean data.', completed: false },
                    { category: 'Automation', description: 'Practice Basic Macro: Practice recording and running a simple Excel Macro (e.g., formatting a data table) to grasp the automation concept.', completed: false },
                    { category: 'Knowledge', description: 'Study Film Financial Models: Seek out simplified film budget templates online to see how P&A, MGs, and screen numbers interact.', completed: false },
                    { category: 'Practical', description: 'Research Other Tools: Use Google to search for "data analysis tools for film distribution" or "project management software for film sales" to find 3-5 non-standard tools.', completed: false },
                ]
            },
            {
                week: 5,
                title: "Project Execution & Initial Outreach",
                description: "This is a high-impact week. You'll complete a key project for your portfolio and begin strategic networking, applying the branding work you did in Week 1.",
                 tasks: [
                    { category: 'Project', description: 'Complete Forecasting Model Draft: Finalize the basic predictive Excel model. Create a one-page summary/pitch of its results.', completed: false },
                    { category: 'Networking', description: 'Targeted Outreach (FDA/General): Identify at least 5 professionals on LinkedIn working at FDA or related distribution companies. Draft and send personalized connection requests/messages.', completed: false },
                    { category: 'Practical', description: 'Identify Volunteer Events: Find the dates and contact info for 2-3 short film festivals or industry screening events in your area or online.', completed: false },
                    { category: 'Branding', description: 'Engage on LinkedIn: Commit to 3 thoughtful comments per week on industry-relevant posts to increase your visibility.', completed: false },
                    { category: 'Knowledge', description: 'Review Deal Structures: Find and read sample distribution deal terms or acquisition case studies to solidify your understanding of deal structure.', completed: false },
                ]
            },
            {
                week: 6,
                title: "Finalizing & High-Impact Connections",
                description: "In the final week, your focus is on solidifying connections, finalizing your career decision based on your research, and establishing habits for continuous learning and skill maintenance.",
                tasks: [
                    { category: 'Practical', description: 'Contact Organizers: Email the volunteer coordinator for the chosen film festivals/events to offer your assistance.', completed: false },
                    { category: 'Networking', description: 'Expand Connections: Draft a professional, brief email to the contact addresses you\'ve found/guessed, asking for a quick virtual coffee/chat about their career path.', completed: false },
                    { category: 'Review', description: 'Evaluate Job Decision: Based on the informational interviews and your skills/interests matrix (from Week 1), make a final, informed decision on the best career path (Sales / Strategy / Box Office).', completed: false },
                    { category: 'Review', description: 'Systems Check: Dedicate 1-2 hours to revisiting your Tableau/Power BI and SQL training. Set a plan for ongoing maintenance of these skills.', completed: false },
                ]
            }
        ];

        const categoryColors = {
            'Foundation': 'bg-blue-100 text-blue-800 border-blue-400',
            'Branding': 'bg-purple-100 text-purple-800 border-purple-400',
            'Research': 'bg-yellow-100 text-yellow-800 border-yellow-400',
            'Knowledge': 'bg-green-100 text-green-800 border-green-400',
            'Training': 'bg-indigo-100 text-indigo-800 border-indigo-400',
            'Systems': 'bg-pink-100 text-pink-800 border-pink-400',
            'Practical': 'bg-teal-100 text-teal-800 border-teal-400',
            'Finance': 'bg-red-100 text-red-800 border-red-400',
            'Forecasting': 'bg-orange-100 text-orange-800 border-orange-400',
            'Negotiation': 'bg-cyan-100 text-cyan-800 border-cyan-400',
            'Automation': 'bg-gray-200 text-gray-800 border-gray-400',
            'Project': 'bg-lime-100 text-lime-800 border-lime-400',
            'Networking': 'bg-fuchsia-100 text-fuchsia-800 border-fuchsia-400',
            'Review': 'bg-rose-100 text-rose-800 border-rose-400',
        };

        const planContainer = document.getElementById('plan-container');
        let overallProgressChart;

        // --- GEMINI API UTILITIES ---
        const apiKey = "";
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${apiKey}`;

        async function fetchWithRetry(url, options, maxRetries = 3) {
            for (let i = 0; i < maxRetries; i++) {
                try {
                    const response = await fetch(url, options);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response;
                } catch (error) {
                    if (i === maxRetries - 1) throw error;
                    const delay = Math.pow(2, i) * 1000 + Math.random() * 1000;
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }

        async function callGeminiAPI(userQuery, systemPrompt, useGrounding = false) {
            const payload = {
                contents: [{ parts: [{ text: userQuery }] }],
                systemInstruction: { parts: [{ text: systemPrompt }] }
            };

            if (useGrounding) {
                payload.tools = [{ "google_search": {} }];
            }

            try {
                const response = await fetchWithRetry(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();
                const candidate = result.candidates?.[0];

                if (!candidate || !candidate.content?.parts?.[0]?.text) {
                    return { text: "Error: Could not generate content.", sources: [] };
                }

                const text = candidate.content.parts[0].text;
                let sources = [];
                const groundingMetadata = candidate.groundingMetadata;
                
                if (useGrounding && groundingMetadata && groundingMetadata.groundingAttributions) {
                    sources = groundingMetadata.groundingAttributions
                        .map(attribution => ({
                            uri: attribution.web?.uri,
                            title: attribution.web?.title,
                        }))
                        .filter(source => source.uri && source.title);
                }
                
                return { text, sources };

            } catch (error) {
                console.error("Gemini API call failed:", error);
                return { text: "An error occurred while connecting to the AI assistant.", sources: [] };
            }
        }

        function showLoading(title) {
            document.getElementById('modal-title').innerText = title;
            document.getElementById('generated-output').innerText = '';
            document.getElementById('loading-indicator').classList.remove('hidden');
            document.getElementById('citation-sources').classList.add('hidden');
            document.getElementById('modal-actions').classList.add('hidden');
            document.getElementById('gemini-modal').classList.remove('invisible', 'opacity-0');
            document.getElementById('gemini-modal').classList.add('visible', 'opacity-100');
        }

        function closeModal() {
            document.getElementById('gemini-modal').classList.add('invisible', 'opacity-0');
            document.getElementById('gemini-modal').classList.remove('visible', 'opacity-100');
            document.getElementById('loading-indicator').classList.add('hidden');
        }

        function displayOutput({ text, sources }, title, isActionable) {
            document.getElementById('modal-title').innerText = title;
            document.getElementById('generated-output').innerText = text;
            document.getElementById('loading-indicator').classList.add('hidden');

            if (isActionable) {
                document.getElementById('modal-actions').classList.remove('hidden');
            } else {
                 document.getElementById('modal-actions').classList.add('hidden');
            }
            
            const sourcesContainer = document.getElementById('citation-sources');
            const sourcesList = document.getElementById('sources-list');
            sourcesList.innerHTML = '';

            if (sources && sources.length > 0) {
                sourcesContainer.classList.remove('hidden');
                sources.forEach(source => {
                    const li = document.createElement('li');
                    li.innerHTML = `<a href="${source.uri}" target="_blank" class="text-indigo-500 hover:text-indigo-600 truncate block">${source.title}</a>`;
                    sourcesList.appendChild(li);
                });
            } else {
                sourcesContainer.classList.add('hidden');
            }
        }

        async function openDraftingModal(weekIndex, taskIndex) {
            const task = planData[weekIndex].tasks[taskIndex];
            const systemPrompt = "You are an expert film industry professional communication assistant. Draft a concise, professional, and friendly email suitable for a LinkedIn connection request or a cold email, asking for a quick 15-minute virtual coffee/chat about the recipient's career path. The tone should be respectful and highlight a genuine interest in their work. Keep the draft under 150 words. Do not include subject line or salutation/closing, just the body text.";
            const userQuery = `Draft an email based on the task: "${task.description}". Assume the recipient works in a distribution/strategy role and I am a junior candidate trying to break into the industry.`;
            
            showLoading("Drafting Professional Outreach Email ✨");
            const output = await callGeminiAPI(userQuery, systemPrompt, false);
            
            // Format the output for display
            const formattedText = output.text.trim();
            displayOutput({ text: formattedText, sources: output.sources }, "Draft Networking Email ✨", true);
        }

        async function openDefinitionModal(taskDescription) {
            const systemPrompt = "You are a concise and authoritative film industry data analyst. Provide a brief, single-paragraph definition and explain the significance of the following financial concepts in the context of film distribution. Your response should be grounded in current, real-world industry practice.";
            const userQuery = `Define and explain the significance of the terms mentioned in this task: "${taskDescription}". Focus on P&A budgets, Minimum Guarantees (MGs), screen numbers, and marketing cost vs. return.`;
            
            showLoading("Defining Core Film Finance Concepts ✨");
            const output = await callGeminiAPI(userQuery, systemPrompt, true);
            
            displayOutput(output, "Concept Definition (Grounding Enabled) ✨", false);
        }

        async function openForecastingModal(weekIndex, taskIndex) {
            const task = planData[weekIndex].tasks[taskIndex];
            const systemPrompt = `You are a creative film development executive. Generate a realistic, fictional scenario for a film distribution forecast model. Provide the output as a simple list of key assumptions, including: Fictional Film Title, Primary Genre, Budget Range (e.g., $10M - $15M), 3 Comparable Film Titles (Comps) that were successful, and an ideal Target Release Window (e.g., Summer Wide Release, Q4 Limited). The output must be clear and easy to input into a spreadsheet.`;
            const userQuery = `Generate a set of inputs to start the forecasting model based on the task: "${task.description}".`;
            
            showLoading("Generating Forecasting Assumptions ✨");
            const output = await callGeminiAPI(userQuery, systemPrompt, false);
            
            // Format the output for display
            const formattedText = output.text.trim();
            displayOutput({ text: formattedText, sources: output.sources }, "Forecasting Model Assumptions ✨", true);
        }

        function copyToClipboard(text) {
            document.execCommand('copy');
            const tempInput = document.createElement('textarea');
            tempInput.value = text;
            document.body.appendChild(tempInput);
            tempInput.select();
            document.execCommand('copy');
            document.body.removeChild(tempInput);
            
            const modalTitle = document.getElementById('modal-title');
            const originalTitle = modalTitle.innerText;
            modalTitle.innerText = "Copied to Clipboard!";
            setTimeout(() => {
                modalTitle.innerText = originalTitle;
            }, 1500);
        }

        // --- END GEMINI API UTILITIES ---

        function renderPlan() {
            planContainer.innerHTML = '';
            planData.forEach((weekData, weekIndex) => {
                const weekSection = document.createElement('section');
                weekSection.id = `week-${weekData.week}`;
                weekSection.className = 'pt-16 -mt-16 mb-12';

                let weekTasksHtml = '';
                weekData.tasks.forEach((task, taskIndex) => {
                    let aiButtonHtml = '';
                    if (weekData.week === 6 && task.description.includes('Expand Connections')) {
                         aiButtonHtml = `<button onclick="openDraftingModal('${weekIndex}', '${taskIndex}')" class="mt-3 text-sm font-semibold text-indigo-600 hover:text-indigo-800 transition-colors flex items-center">
                              Draft Networking Email ✨
                         </button>`;
                    } else if (weekData.week === 2 && task.description.includes('Define Core Financial Terms')) {
                        aiButtonHtml = `<button onclick="openDefinitionModal('${task.description}')" class="mt-3 text-sm font-semibold text-indigo-600 hover:text-indigo-800 transition-colors flex items-center">
                              Quick Definition ✨
                         </button>`;
                    }
                    // NEW FEATURE: Week 4, Task 0 (Start Forecasting Model)
                    else if (weekData.week === 4 && taskIndex === 0) {
                        aiButtonHtml = `<button onclick="openForecastingModal('${weekIndex}', '${taskIndex}')" class="mt-3 text-sm font-semibold text-indigo-600 hover:text-indigo-800 transition-colors flex items-center">
                              Generate Scenario Inputs ✨
                         </button>`;
                    }

                    const completedClass = task.completed ? 'completed' : '';

                    weekTasksHtml += `
                        <div class="task-card bg-white p-4 rounded-lg shadow-sm border-l-4 ${categoryColors[task.category] || 'border-gray-400'} ${completedClass}" data-week="${weekIndex}" data-task="${taskIndex}">
                            <div class="flex items-start">
                                <div class="flex items-center h-5">
                                    <input id="task-${weekIndex}-${taskIndex}" type="checkbox" ${task.completed ? 'checked' : ''} class="focus:ring-indigo-500 h-5 w-5 text-indigo-600 border-gray-300 rounded cursor-pointer">
                                </div>
                                <div class="ml-4 text-sm w-full">
                                    <label for="task-${weekIndex}-${taskIndex}" class="font-medium text-gray-900 cursor-pointer">
                                        <span class="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full ${categoryColors[task.category] || 'bg-gray-200'}">
                                            ${task.category}
                                        </span>
                                    </label>
                                    <p class="text-gray-600 mt-2">${task.description}</p>
                                    ${aiButtonHtml}
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                weekSection.innerHTML = `
                    <div class="mb-8 text-center">
                        <h2 class="text-3xl font-bold text-gray-900">Week ${weekData.week}: ${weekData.title}</h2>
                        <p class="mt-2 text-md text-gray-600 max-w-3xl mx-auto">${weekData.description}</p>
                    </div>
                    <div class="mb-4">
                        <div class="flex justify-between mb-1">
                            <span class="text-base font-medium text-gray-700">Weekly Progress</span>
                            <span class="text-sm font-medium text-gray-700" id="week-${weekData.week}-progress-text">0%</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2.5">
                            <div id="week-${weekData.week}-progress-bar" class="bg-indigo-600 h-2.5 rounded-full" style="width: 0%"></div>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        ${weekTasksHtml}
                    </div>
                `;
                planContainer.appendChild(weekSection);
            });
            updateAllProgress();
        }

        function updateAllProgress() {
            let totalTasks = 0;
            let completedTasks = 0;

            planData.forEach(weekData => {
                const weeklyCompleted = weekData.tasks.filter(t => t.completed).length;
                const weeklyTotal = weekData.tasks.length;
                const percentage = weeklyTotal > 0 ? (weeklyCompleted / weeklyTotal) * 100 : 0;
                
                totalTasks += weeklyTotal;
                completedTasks += weeklyCompleted;

                document.getElementById(`week-${weekData.week}-progress-bar`).style.width = `${percentage}%`;
                document.getElementById(`week-${weekData.week}-progress-text`).innerText = `${Math.round(percentage)}%`;
            });
            
            const overallPercentage = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;

            document.getElementById('completed-tasks-count').innerText = completedTasks;
            document.getElementById('total-tasks-count').innerText = totalTasks;

            if (overallProgressChart) {
                overallProgressChart.data.datasets[0].data = [completedTasks, totalTasks - completedTasks];
                overallProgressChart.update();
            }
        }
        
        function handleTaskToggle(e) {
            if (e.target.type === 'checkbox') {
                const card = e.target.closest('.task-card');
                const weekIndex = card.dataset.week;
                const taskIndex = card.dataset.task;
                
                const isChecked = e.target.checked;
                planData[weekIndex].tasks[taskIndex].completed = isChecked;
                card.classList.toggle('completed', isChecked);
                
                updateAllProgress();
            }
        }

        function initializeChart() {
            const ctx = document.getElementById('overallProgressChart').getContext('2d');
            const totalTasks = planData.reduce((sum, week) => sum + week.tasks.length, 0);
            const completedTasks = planData.reduce((sum, week) => sum + week.tasks.filter(t => t.completed).length, 0);

            overallProgressChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Completed', 'Remaining'],
                    datasets: [{
                        data: [completedTasks, totalTasks - completedTasks],
                        backgroundColor: [
                            '#4CAF50',
                            '#E5E7EB'
                        ],
                        borderColor: [
                            '#FFFFFF',
                            '#FFFFFF'
                        ],
                        borderWidth: 4,
                        hoverOffset: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            enabled: true
                        }
                    }
                }
            });
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            renderPlan();
            initializeChart();
            planContainer.addEventListener('change', handleTaskToggle);
        });

    </script>
</body>
</html>

